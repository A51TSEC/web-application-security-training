Introduction
General
-----------------------------
(A1) Inection:
-----SQL Injection
2. Try to retrieve the department of the employee Bob Franco. Note that you have been granted full administrator privileges in this assignment and can access all data without authentication.
SELECT department from employees where first_name='Bob'
3. Try to change the department of Tobi Barnett to 'Sales'. Note that you have been granted full administrator privileges in this assignment and can access all data without authentication.
UPDATE employees SET department='Sales' WHERE first_name='Tobi'
4. Now try to modify the scheme by adding the column "phone" (varchar(20)) to the table "employees". :
ALTER TABLE employees ADD COLUMN phone varchar(20);
-----SQL Injection Advanced
-----SQL Injection Mitigation
-----Path Traversal
5. Try to grant the usergroup "UnauthorizedUser" the right to alter tables:
GRANT ALTER TABLE TO UnauthorizedUser;
9. The query in the code builds a dynamic query as seen in the previous example. The query is build by concatenating strings making it susceptible to String SQL injection:
"SELECT * FROM user_data WHERE first_name = 'John' AND last_name = '" + lastName + "'";
SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 
SELECT * FROM user_data WHERE first_name = 'John' and last_name = 'Smith' and Last_Name = 'Smith'

-----------------------------
(2) Broken Authentication
-----------------------------
(3) Sensitive Data Exposure
-----------------------------
(4) XML Enternal Entities XXE
-----------------------------
(5) Broken Acess Control
-----------------------------
(6) Cross Site Scripting XSS
-----------------------------
(7) Insecure Deseialization
-----------------------------
(8) Vulnerable Components
-----------------------------
(9) Reuqest Forgeries
-----------------------------
Client Side
-----------------------------
Challenges
-----------------------------
